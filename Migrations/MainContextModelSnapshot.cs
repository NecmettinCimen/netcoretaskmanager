// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using TaskManager.Models;

namespace TaskManager.Migrations
{
    [DbContext(typeof(MainContext))]
    internal class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Models.Event", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.ToTable("Events");

                b.HasData(
                    new
                    {
                        Id = 1,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Name = "Bekliyor",
                        Public = true,
                        Status = (short) 1
                    },
                    new
                    {
                        Id = 2,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Name = "İşlemde",
                        Public = true,
                        Status = (short) 1
                    },
                    new
                    {
                        Id = 3,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Name = "Tamamlandı",
                        Public = true,
                        Status = (short) 1
                    },
                    new
                    {
                        Id = 4,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Name = "Red Edildi",
                        Public = true,
                        Status = (short) 1
                    });
            });

            modelBuilder.Entity("TaskManager.Models.Label", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.ToTable("Labels");

                b.HasData(
                    new
                    {
                        Id = 1,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Name = "Web",
                        Public = true,
                        Status = (short) 1
                    });
            });

            modelBuilder.Entity("TaskManager.Models.Project", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<int>("EventId")
                    .HasColumnType("int");

                b.Property<string>("Explanation")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ManagerId")
                    .HasColumnType("int");

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.Property<string>("Url")
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("EventId");

                b.HasIndex("ManagerId");

                b.ToTable("Projects");
            });

            modelBuilder.Entity("TaskManager.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(150)")
                    .HasMaxLength(150);

                b.Property<string>("NameSurname")
                    .IsRequired()
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(150)")
                    .HasMaxLength(150);

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = 1,
                        CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CreatorId = 1,
                        Email = "admin",
                        NameSurname = "Admin",
                        Password = "1",
                        Public = true,
                        Status = (short) 1
                    });
            });

            modelBuilder.Entity("TaskManager.Models.Work", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<int>("EventId")
                    .HasColumnType("int");

                b.Property<string>("Explanation")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ManagerId")
                    .HasColumnType("int");

                b.Property<int?>("ParentWorkId")
                    .HasColumnType("int");

                b.Property<int>("ProjectId")
                    .HasColumnType("int");

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.Property<string>("Url")
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("EventId");

                b.HasIndex("ManagerId");

                b.HasIndex("ParentWorkId");

                b.HasIndex("ProjectId");

                b.ToTable("Works");
            });

            modelBuilder.Entity("TaskManager.Models.WorkHistory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<int>("ManagerId")
                    .HasColumnType("int");

                b.Property<short>("PrevStatus")
                    .HasColumnType("smallint");

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.Property<int>("WorkId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ManagerId");

                b.HasIndex("WorkId");

                b.ToTable("WorkHistorys");
            });

            modelBuilder.Entity("TaskManager.Models.WorkLabels", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int>("CreatorId")
                    .HasColumnType("int");

                b.Property<int>("LabelId")
                    .HasColumnType("int");

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<short>("Status")
                    .HasColumnType("smallint");

                b.Property<int>("WorkId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("LabelId");

                b.HasIndex("WorkId");

                b.ToTable("WorkLabels");
            });

            modelBuilder.Entity("TaskManager.Models.Event", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.Label", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.Project", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Event", "Event")
                    .WithMany()
                    .HasForeignKey("EventId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.User", "Manager")
                    .WithMany()
                    .HasForeignKey("ManagerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.User", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.Work", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Event", "Event")
                    .WithMany()
                    .HasForeignKey("EventId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.User", "Manager")
                    .WithMany()
                    .HasForeignKey("ManagerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Work", "ParentWork")
                    .WithMany()
                    .HasForeignKey("ParentWorkId");

                b.HasOne("TaskManager.Models.Project", "Project")
                    .WithMany()
                    .HasForeignKey("ProjectId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.WorkHistory", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.User", "Manager")
                    .WithMany()
                    .HasForeignKey("ManagerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Work", "Work")
                    .WithMany()
                    .HasForeignKey("WorkId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TaskManager.Models.WorkLabels", b =>
            {
                b.HasOne("TaskManager.Models.User", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Label", "Label")
                    .WithMany()
                    .HasForeignKey("LabelId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TaskManager.Models.Work", "Work")
                    .WithMany()
                    .HasForeignKey("WorkId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}